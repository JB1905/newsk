import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, b as claim_element, f as children, h as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as noop, t as text, a as space, g as claim_text, j as claim_space, o as append_dev, A as create_component, B as claim_component, C as mount_component, r as transition_in, u as transition_out, F as destroy_component, x as empty, H as check_outros, L as destroy_each, G as group_outros } from './index.ed3fdf5d.js';
import { a as apiKey } from './newsapi.724a8558.js';

/* src/components/Publisher.svelte generated by Svelte v3.16.7 */

const file = "src/components/Publisher.svelte";

// (13:4) {#if description}
function create_if_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "text-gray-700 text-base");
			add_location(p, file, 13, 6, 312);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			p.innerHTML = /*description*/ ctx[2];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(13:4) {#if description}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let a;
	let div0;
	let t0;
	let a_href_value;
	let t1;
	let if_block = /*description*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			a = element("a");
			div0 = element("div");
			t0 = text(/*name*/ ctx[1]);
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a = claim_element(div1_nodes, "A", { href: true });
			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, /*name*/ ctx[1]);
			div0_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "font-bold text-xl mb-2");
			add_location(div0, file, 9, 6, 225);
			attr_dev(a, "href", a_href_value = "publishers/" + /*id*/ ctx[0]);
			add_location(a, file, 8, 4, 192);
			attr_dev(div1, "class", "px-6 py-4");
			add_location(div1, file, 7, 2, 164);
			attr_dev(div2, "class", "publisher max-w-sm rounded overflow-hidden shadow-lg mx-auto my-8");
			add_location(div2, file, 6, 0, 82);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, a);
			append_dev(a, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			if (if_block) if_block.m(div1, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*description*/ ctx[2]) if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { data } = $$props;
	const { id, name, description } = data;
	const writable_props = ["data"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Publisher> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
	};

	$$self.$capture_state = () => {
		return { data };
	};

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
	};

	return [id, name, description, data];
}

class Publisher extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Publisher",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*data*/ ctx[3] === undefined && !("data" in props)) {
			console.warn("<Publisher> was created without expected prop 'data'");
		}
	}

	get data() {
		throw new Error("<Publisher>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Publisher>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/publishers/index.svelte generated by Svelte v3.16.7 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (29:0) {#each publishers as publisher}
function create_each_block(ctx) {
	let current;

	const publisher = new Publisher({
			props: { data: /*publisher*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(publisher.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(publisher.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(publisher, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const publisher_changes = {};
			if (dirty & /*publishers*/ 1) publisher_changes.data = /*publisher*/ ctx[1];
			publisher.$set(publisher_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(publisher.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(publisher.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(publisher, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(29:0) {#each publishers as publisher}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t;
	let each_1_anchor;
	let current;
	let each_value = /*publishers*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Publishers";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*publishers*/ 1) {
				each_value = /*publishers*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	const res = await this.fetch(`https://newsapi.org/v2/sources?apiKey=${apiKey}`);
	const data = await res.json();

	if (res.status === 200) {
		return { publishers: data.sources };
	} else {
		this.error(res.status, data.message);
	}
}

function instance$1($$self, $$props, $$invalidate) {
	let { publishers } = $$props;
	const writable_props = ["publishers"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Publishers> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("publishers" in $$props) $$invalidate(0, publishers = $$props.publishers);
	};

	$$self.$capture_state = () => {
		return { publishers };
	};

	$$self.$inject_state = $$props => {
		if ("publishers" in $$props) $$invalidate(0, publishers = $$props.publishers);
	};

	return [publishers];
}

class Publishers extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { publishers: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Publishers",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*publishers*/ ctx[0] === undefined && !("publishers" in props)) {
			console.warn("<Publishers> was created without expected prop 'publishers'");
		}
	}

	get publishers() {
		throw new Error("<Publishers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set publishers(value) {
		throw new Error("<Publishers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Publishers;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMGU2MzJlNzUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1B1Ymxpc2hlci5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3B1Ymxpc2hlcnMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgZGF0YTtcblxuICBjb25zdCB7IGlkLCBuYW1lLCBkZXNjcmlwdGlvbiB9ID0gZGF0YTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwicHVibGlzaGVyIG1heC13LXNtIHJvdW5kZWQgb3ZlcmZsb3ctaGlkZGVuIHNoYWRvdy1sZyBteC1hdXRvIG15LThcIj5cbiAgPGRpdiBjbGFzcz1cInB4LTYgcHktNFwiPlxuICAgIDxhIGhyZWY9XCJwdWJsaXNoZXJzL3tpZH1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb250LWJvbGQgdGV4dC14bCBtYi0yXCI+e25hbWV9PC9kaXY+XG4gICAgPC9hPlxuXG4gICAgeyNpZiBkZXNjcmlwdGlvbn1cbiAgICAgIDxwIGNsYXNzPVwidGV4dC1ncmF5LTcwMCB0ZXh0LWJhc2VcIj5cbiAgICAgICAge0BodG1sIGRlc2NyaXB0aW9ufVxuICAgICAgPC9wPlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuPC9kaXY+XG4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgaW1wb3J0IHsgYXBpS2V5IH0gZnJvbSAnLi4vLi4vYXBpL25ld3NhcGknO1xuXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChcbiAgICAgIGBodHRwczovL25ld3NhcGkub3JnL3YyL3NvdXJjZXM/YXBpS2V5PSR7YXBpS2V5fWBcbiAgICApO1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICByZXR1cm4geyBwdWJsaXNoZXJzOiBkYXRhLnNvdXJjZXMgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBQdWJsaXNoZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9QdWJsaXNoZXIuc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IHB1Ymxpc2hlcnM7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+UHVibGlzaGVyczwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG57I2VhY2ggcHVibGlzaGVycyBhcyBwdWJsaXNoZXJ9XG4gIDxQdWJsaXNoZXIgZGF0YT17cHVibGlzaGVyfSAvPlxuey9lYWNofVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BQ2EsSUFBSTtTQUVQLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxLQUFLLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQ3lCakMsR0FBVTs7O2dDQUFmLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQUFDLEdBQVU7OzsrQkFBZixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBekJrQixPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7T0FDckMsR0FBRyxTQUFTLElBQUksQ0FBQyxLQUFLLDBDQUNlLE1BQU07T0FHM0MsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJOztLQUV2QixHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUc7V0FDWCxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU87O0VBRWpDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTzs7Ozs7T0FWNUIsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
